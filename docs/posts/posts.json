[
  {
    "path": "posts/2021-01-31-welcome/",
    "title": "Text Mining a George RR Martin Classic",
    "description": "Using text analysis to observe trends in 'A Clash of Kings'.",
    "author": [
      {
        "name": "Caitlin Reza",
        "url": {}
      }
    ],
    "date": "2021-01-31",
    "categories": [],
    "contents": "\nSummary\nIn this document, I use text mining analysis and basic wrangling to assess text patterns in George RR Martin’s 1999 classic ‘A Clash of Kings’, because I will never get around to reading it any other way.\nText: Martin, George R. R. A Clash of Kings. New York: Bantam Books, 1999. Internet Archive, http://archive.org/details/fire-blood-george-rr-martin.\n\n\n# Read in the PDF\nclash_kings_text <- pdf_text(\"A-Clash-Of-Kings-George-RR-Martin.pdf\")\n\n\n\n\n\n# Let's make it tidy\n\nclash_tidy <- data.frame(clash_kings_text) %>%  # convert into data frame, split it up by page\n  mutate(text_full = str_split(clash_kings_text, pattern = '\\\\n')) %>% # split lines (each PDF line ends with \\)\n    unnest(text_full) %>% \n  mutate(text_full = str_trim(text_full)) \n\n\n\n\n\n# But a bit more tidy\n\nclash_df <- clash_tidy %>% \n  slice(-(1:127))  # Get rid of all the unnecessary publishing grime\n\n# Don't separate by chapter because George RR Martin for some reason found it necessary to separate his book by chapter-less names \n \n# Separate by word (each word a single line)\nclash_tokens <- clash_df %>% \n  unnest_tokens(word, text_full) %>% \n  select(-clash_kings_text)\n\n\n\n\n\n# Count the occurrence of every word\nclash_wordcount <- clash_tokens %>% \n  count(word)\n\n# Get rid of those pesky \"stopwords\" using antijoin()!\nclash_nonstop_words <- clash_tokens %>% \n  anti_join(stop_words)\n# Ponder if \"Game Thrones\" has the same ring to it as \"Game of Thrones\"\n\n# (it doesn't)\n\n\n\n\n\n# Re-count the words, this time omitting stopwords\nnonstop_counts <- clash_nonstop_words %>% \n  count(word) %>% \n  arrange(-n)\n\n\n\n\n\n# Top 10 words used in Clash of Kings?\ntop_10_words <- nonstop_counts %>% \n  slice(1:10)\n\n# Plot it just for fun\nggplot(data = top_10_words, aes(x = reorder(word, n), y = n, fill = \"red\")) +\n  geom_col(color = \"tomato4\") +\n  coord_flip() + # Make it easy on the eye\n  labs(x = \"Word\",\n       y = \"Frequency of Use\",\n       title = \"Top 10 Words in George RR Martin's 'A Clash of Kings'\") +\n  theme(legend.position = \"none\")\n\n\n\n\nWordcloud: Top 100 Words\n\n\n# Creating a WordCloud\n\nclash_top100 <- nonstop_counts %>% \n  arrange(-n) %>% \n  slice(1:100) # Make a subset of 100 most used words\n\nclash_cloud <- ggplot(data = clash_top100, aes(label = word)) +\n  geom_text_wordcloud(aes(color = n, size = n), shape = \"diamond\", backgroundColor = \"grey\") +\n  scale_size_area(max_size = 6) +\n  scale_color_gradientn(colors = c(\"brown\",\"orange\",\"red\")) +\n  theme_minimal()\n  \n\nclash_cloud\n\n\n\n\nWordcloud: Top 300 Words\n\n\n# Make an interactive word cloud of top 300 words\nclash_top300 <- nonstop_counts %>% \n  arrange(-n) %>% \n  slice(1:300)\n\n\nwordcloud2(clash_top300, size = .65, color = \"orange\", backgroundColor=\"black\", shape = \"star\")\n\n\n\n{\"x\":{\"word\":[\"lord\",\"ser\",\"tyrion\",\"king\",\"black\",\"hand\",\"jon\",\"told\",\"arya\",\"time\",\"eyes\",\"lady\",\"theon\",\"bran\",\"brother\",\"red\",\"stannis\",\"head\",\"father\",\"boy\",\"dead\",\"maester\",\"gods\",\"night\",\"son\",\"sansa\",\"half\",\"blood\",\"catelyn\",\"day\",\"heard\",\"left\",\"castle\",\"sword\",\"white\",\"stark\",\"girl\",\"water\",\"called\",\"king’s\",\"looked\",\"renly\",\"fire\",\"walls\",\"queen\",\"gold\",\"joffrey\",\"don’t\",\"i’ll\",\"lannister\",\"winterfell\",\"hear\",\"davos\",\"hard\",\"horse\",\"hot\",\"feet\",\"found\",\"green\",\"he’d\",\"cersei\",\"i’m\",\"robb\",\"stone\",\"wine\",\"it’s\",\"knight\",\"hands\",\"wall\",\"dark\",\"battle\",\"beneath\",\"city\",\"sea\",\"hair\",\"iron\",\"cloak\",\"house\",\"door\",\"fingers\",\"woman\",\"grey\",\"grace\",\"dany\",\"stood\",\"watch\",\"true\",\"sister\",\"lords\",\"mouth\",\"hundred\",\"he’s\",\"voice\",\"mother\",\"varys\",\"sweet\",\"brought\",\"brothers\",\"robert\",\"steel\",\"past\",\"wind\",\"horses\",\"light\",\"fool\",\"leave\",\"hall\",\"prince\",\"cold\",\"fear\",\"lost\",\"wolf\",\"wood\",\"arms\",\"father’s\",\"sound\",\"tower\",\"heart\",\"hodor\",\"north\",\"rest\",\"strong\",\"you’re\",\"pie\",\"killed\",\"there’s\",\"bed\",\"rode\",\"moment\",\"close\",\"child\",\"daughter\",\"kill\",\"knights\",\"landing\",\"love\",\"word\",\"words\",\"bear\",\"sat\",\"yoren\",\"die\",\"laughed\",\"won’t\",\"you’ll\",\"died\",\"that’s\",\"war\",\"bring\",\"call\",\"raised\",\"uncle\",\"harrenhal\",\"pale\",\"river\",\"send\",\"ran\",\"reached\",\"thousand\",\"command\",\"set\",\"rose\",\"smiled\",\"silver\",\"sleep\",\"table\",\"talk\",\"blue\",\"fight\",\"i’d\",\"life\",\"summer\",\"throat\",\"cloaks\",\"death\",\"gate\",\"inside\",\"bastard\",\"children\",\"smile\",\"air\",\"jaime\",\"mormont\",\"cut\",\"feel\",\"hold\",\"remembered\",\"rock\",\"speak\",\"tywin\",\"brienne\",\"bloody\",\"i’ve\",\"sons\",\"golden\",\"luwin\",\"moved\",\"ride\",\"cup\",\"days\",\"remember\",\"smell\",\"trees\",\"broken\",\"ground\",\"people\",\"tall\",\"arm\",\"fell\",\"free\",\"guards\",\"morning\",\"rodrik\",\"teeth\",\"truth\",\"pulled\",\"ships\",\"walder\",\"women\",\"safe\",\"shadow\",\"dragons\",\"burned\",\"held\",\"meant\",\"empty\",\"ghost\",\"heavy\",\"squire\",\"commanded\",\"gendry\",\"matter\",\"swords\",\"soft\",\"south\",\"storm’s\",\"wolves\",\"baratheon\",\"foot\",\"honor\",\"riverrun\",\"thick\",\"frey\",\"steps\",\"watched\",\"wife\",\"burning\",\"coming\",\"home\",\"hope\",\"neck\",\"bronn\",\"crown\",\"helm\",\"shouted\",\"we’ll\",\"boys\",\"closed\",\"world\",\"answer\",\"lannisters\",\"snow\",\"ten\",\"cressen\",\"guard\",\"qhorin\",\"wore\",\"yard\",\"axe\",\"deep\",\"flames\",\"gates\",\"smoke\",\"lay\",\"passed\",\"throne\",\"ears\",\"return\",\"she’d\",\"thin\",\"armor\",\"hurt\",\"lips\",\"littlefinger\",\"lommy\",\"run\",\"skin\",\"afraid\",\"brown\",\"sun\",\"times\",\"food\",\"rickon\",\"strength\",\"filled\",\"leather\",\"they’d\",\"dream\",\"eye\",\"fall\"],\"freq\":[1420,1147,654,575,508,487,450,446,432,422,420,410,390,387,386,384,372,368,356,349,328,309,303,296,289,284,280,274,274,266,264,262,261,257,256,254,249,249,244,238,238,233,232,231,229,228,228,225,224,222,221,219,217,214,210,210,208,208,208,207,205,205,202,202,202,200,198,197,197,190,189,189,185,183,181,181,179,179,178,178,178,174,173,166,166,164,163,162,161,161,160,159,156,153,153,151,148,147,147,145,144,144,141,140,137,137,136,136,135,135,135,135,135,133,132,132,131,130,130,130,129,129,129,127,126,126,125,123,122,121,119,119,119,119,119,119,119,119,118,118,118,117,115,115,114,113,113,113,112,112,112,112,111,111,111,111,110,109,109,108,108,107,107,106,106,106,106,105,105,105,105,105,105,104,104,104,104,103,103,103,102,102,102,101,101,101,101,101,101,101,100,99,99,99,98,98,98,98,97,97,97,97,97,96,96,96,96,95,95,95,95,94,94,94,94,93,93,93,93,92,92,91,90,90,90,89,89,89,89,88,88,88,88,87,87,87,87,86,86,86,86,86,85,85,85,85,84,84,84,84,84,83,83,83,83,83,82,82,82,81,81,81,81,80,80,80,80,80,79,79,79,79,79,78,78,78,77,77,77,77,76,76,76,76,76,76,76,75,75,75,75,74,74,74,73,73,73,72,72,72],\"fontFamily\":\"Segoe UI\",\"fontWeight\":\"bold\",\"color\":\"orange\",\"minSize\":0,\"weightFactor\":0.0823943661971831,\"backgroundColor\":\"black\",\"gridSize\":0,\"minRotation\":-0.785398163397448,\"maxRotation\":0.785398163397448,\"shuffle\":true,\"rotateRatio\":0.4,\"shape\":\"star\",\"ellipticity\":0.65,\"figBase64\":null,\"hover\":null},\"evals\":[],\"jsHooks\":{\"render\":[{\"code\":\"function(el,x){\\n                        console.log(123);\\n                        if(!iii){\\n                          window.location.reload();\\n                          iii = False;\\n\\n                        }\\n  }\",\"data\":null}]}}\nSentiment Analysis\n\n\n# Load the lexicon: I'll choose the \"afinn\" lexicon\n# get_sentiments(lexicon = \"afinn\")\n\n# Bind the file with all of the non- \"stop words\" to the lexicon\nclash_afinn <- clash_nonstop_words %>% \n  inner_join(get_sentiments(\"afinn\")) # This put a value on each word in the book, each value corresponds with an emotion bin\n\n\n# Count the number of words per value\nafinn_counts <- clash_afinn %>% \n  count(value) %>% \n  mutate(emotion = case_when( # Add descriptions so you can color code them later in ggplot\n    value %in% c(-5, -4, -3, -2, -1) ~ \"Negative\",\n    value %in% c(1, 2, 3, 4, 5) ~ \"Positive\"\n  ))\n\n\n\n\n\n# Create a visualization showing the distribution of word-emotion-bin associations\n\n\nggplot(data = afinn_counts, aes(x = value,y = n, fill = emotion)) + \n  geom_col() + \n  facet_wrap(~emotion, scales = \"free\") +\n  labs(x = \"Emotional Value (AFINN Lexicon)\",\n       y = \"Frequency Used\",\n       title = \"Emotional Sentiment Trends in 'A Clash of Kings'\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-01-31-welcome/distill-preview.png",
    "last_modified": "2021-02-25T09:05:26-08:00",
    "input_file": {}
  }
]
